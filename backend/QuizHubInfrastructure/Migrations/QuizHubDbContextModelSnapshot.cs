// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizHubInfrastructure.Data;

#nullable disable

namespace QuizHubInfrastructure.Migrations
{
    [DbContext(typeof(QuizHubDbContext))]
    partial class QuizHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizHubDomain.Entities.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "Java"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "C#"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "C++"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "True"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "False"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 3,
                            Text = "berlinskog zida"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "gudacki"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsCorrect = true,
                            QuestionId = 4,
                            Text = "udaracki"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsCorrect = false,
                            QuestionId = 4,
                            Text = "duvacki"
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AttemptAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwardedPoints")
                        .HasColumnType("int");

                    b.Property<string>("FillInAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizAttemptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizAttemptId");

                    b.ToTable("AttemptAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwardedPoints = 3,
                            IsCorrect = true,
                            QuestionId = 1,
                            QuizAttemptId = 1
                        },
                        new
                        {
                            Id = 2,
                            AwardedPoints = 2,
                            IsCorrect = true,
                            QuestionId = 2,
                            QuizAttemptId = 1
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AttemptAnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerOptionId")
                        .HasColumnType("int");

                    b.Property<int>("AttemptAnswerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerOptionId");

                    b.HasIndex("AttemptAnswerId");

                    b.ToTable("AttemptAnswerOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerOptionId = 1,
                            AttemptAnswerId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerOptionId = 1,
                            AttemptAnswerId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerOptionId = 1,
                            AttemptAnswerId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerOptionId = 4,
                            AttemptAnswerId = 2
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Objektno programiranje",
                            IsActive = true,
                            Name = "Programiranje"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rimska i anticka arhitektura",
                            IsActive = true,
                            Name = "Arhitektura"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Opste znanje",
                            IsActive = true,
                            Name = "Istorija"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Klasicna muzika",
                            IsActive = true,
                            Name = "Muzika"
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectFillInAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Order = 1,
                            Points = 3,
                            QuestionType = 1,
                            QuizId = 1,
                            Text = "Koji od navedenih programa podrzava klase"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Order = 2,
                            Points = 2,
                            QuestionType = 2,
                            QuizId = 1,
                            Text = "Metoda Console.WriteLine() vraca vrednost string?"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Order = 1,
                            Points = 2,
                            QuestionType = 3,
                            QuizId = 3,
                            Text = "Zid od ___ je simbol Hladnog rata u Nemackoj?"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Order = 1,
                            Points = 2,
                            QuestionType = 0,
                            QuizId = 4,
                            Text = "Kojoj grupi instrumenata pripada bubanj?"
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DifficultyLevel = 0,
                            IsActive = true,
                            TimeLimit = 60,
                            Title = "Kviz programiranja"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            DifficultyLevel = 1,
                            IsActive = true,
                            TimeLimit = 60,
                            Title = "Kviz o arhitekturi Novog Sada"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            DifficultyLevel = 0,
                            IsActive = true,
                            TimeLimit = 60,
                            Title = "Kviz opsteg znanja istoriji"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            DifficultyLevel = 2,
                            IsActive = true,
                            TimeLimit = 60,
                            Title = "Kviz o muzici"
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.QuizAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeTakenSeconds")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinishedAt = new DateTime(2025, 9, 14, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 1,
                            Score = 1,
                            StartedAt = new DateTime(2025, 9, 14, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeTakenSeconds = 3600,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            FinishedAt = new DateTime(2025, 9, 14, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 1,
                            Score = 3,
                            StartedAt = new DateTime(2025, 9, 14, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeTakenSeconds = 3600,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            FinishedAt = new DateTime(2025, 9, 4, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 2,
                            Score = 5,
                            StartedAt = new DateTime(2025, 9, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeTakenSeconds = 3600,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            FinishedAt = new DateTime(2025, 9, 15, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 3,
                            Score = 1,
                            StartedAt = new DateTime(2025, 9, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeTakenSeconds = 3600,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            FinishedAt = new DateTime(2025, 9, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            QuizId = 4,
                            Score = 1,
                            StartedAt = new DateTime(2025, 9, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeTakenSeconds = 3600,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg+InxaoNsss+/H2jitDRm8G652TpCi7RMkdRoeNeVai+H3/7foRQ0XtTmgpkQ+WQ==",
                            Role = 0,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "marko@cake.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg+InxaoNsss+/H2jitDRm8G652TpCi7RMkdRoeNeVai+H3/7foRQ0XtTmgpkQ+WQ==",
                            Role = 1,
                            UserName = "marko"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ana@cake.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEFg+InxaoNsss+/H2jitDRm8G652TpCi7RMkdRoeNeVai+H3/7foRQ0XtTmgpkQ+WQ==",
                            Role = 1,
                            UserName = "ana"
                        });
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AnswerOption", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AttemptAnswer", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizHubDomain.Entities.QuizAttempt", "QuizAttempt")
                        .WithMany("AttemptAnswers")
                        .HasForeignKey("QuizAttemptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AttemptAnswerOption", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.AnswerOption", "AnswerOption")
                        .WithMany()
                        .HasForeignKey("AnswerOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizHubDomain.Entities.AttemptAnswer", "AttemptAnswer")
                        .WithMany("AttemptAnswerOptions")
                        .HasForeignKey("AttemptAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerOption");

                    b.Navigation("AttemptAnswer");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Question", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Quiz", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.QuizAttempt", b =>
                {
                    b.HasOne("QuizHubDomain.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizHubDomain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.AttemptAnswer", b =>
                {
                    b.Navigation("AttemptAnswerOptions");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizHubDomain.Entities.QuizAttempt", b =>
                {
                    b.Navigation("AttemptAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
